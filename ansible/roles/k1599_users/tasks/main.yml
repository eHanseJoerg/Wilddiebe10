---
- name: Ensure expected groups are created
  group:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ k1599_users_present_groups|default([]) }}"

- name: Ensure expected groups are absent
  group:
    name: "{{ item }}"
    state: absent
  with_items:
    - "{{ k1599_users_absent_groups|default([]) }}"

- name: Check if user are already created
  shell: "getent passwd {{ item.name }} > /dev/null"
  register: existing_users
  failed_when: false
  changed_when: false
  with_items:
    - "{{ k1599_users_present_users }}"

- block:

  - name: Ensure expected users are created
    user:
      name: "{{ item.0.name }}"
      password: "{{ item.0.passwords.crypt }}"
      shell: '/bin/bash'
      group: "{{  item.0.group|default('users')  }}"
      groups: "{{ item.0.groups|default('') }}"
      comment: "{{ item.0.name }}"
      state: present
    when: item.1.rc != 0 or refresh_users is defined
    with_together:
      - "{{ k1599_users_present_users }}"
      - "{{ existing_users.results }}"

  - name: Ensure permissions on user home
    file:
      path: '/home/{{ item.name }}'
      state: 'directory'
      mode: '0700'
      owner: "{{ item.name }}"
      group: "{{ item.group }}"
    with_items: "{{ k1599_users_present_users }}"
    when: "{{ item.name != item.group|default('users') }}"

  - name: Ensure permissions on group user home
    file:
      path: '/home/{{ item.name }}'
      state: 'directory'
      mode: '0770'
      owner: "{{ item.name }}"
      group: "{{ item.group }}"
    with_items: "{{ k1599_users_present_users }}"
    when: "{{ item.name == item.group|default('users') }}"

  when: refresh_users is defined

- name: Ensure expected users are absend
  user:
    name: "{{ item  }}"
    state: absent
  with_items:
    - "{{ k1599_users_absent_users|default([]) }}"
